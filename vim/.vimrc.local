" Source the vimrc file after saving it
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
    autocmd bufwritepost .vimrc.local source $MYVIMRC
    autocmd bufwritepost .vimrc.local.bundles source $MYVIMRC
endif

" Open .vimrc.local edit
nmap <Leader>c :tabedit $MYVIMRC.local<CR>

nmap <C-p> :CtrlP<CR>                                                       
nmap <C-k><C-b> :NERDTreeToggle<CR>

" Toggle workspace panel
nmap <Leader>W :call SessionManagerToggle()<CR>
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>
set relativenumber
set tabstop=4
set shiftwidth=4
set expandtab

let g:javascript_plugin_flow = 1                                            
let g:syntatic_check_on_open = 1                                            

let g:ycm_add_preview_to_completeopt=0                                      
let g:ycm_confirm_extra_confi=0                                             
set completeopt-=preview                                                    

autocmd FileType css set omnifunc=csscomplete#CompleteCSS                   
autocmd FileType scss set omnifunc=csscomplete#CompleteCSS                  

"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
set completeopt=longest,menuone                                             


let g:acp_enableAtStartup = 0                                               
" Use neocomplete.                                                          
let g:neocomplete#enable_at_startup = 1                                     
" " Use smartcase.                                                          
let g:neocomplete#enable_smart_case = 1 
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:neocomplete#enable_auto_select = 1
let g:syntastic_javascript_eslint_exe='$(npm bin)/eslint'

set mouse=a
xnoremap p pgvy

function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction
autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction
autocmd FileType php inoremap <Leader>e <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>

let g:php_namespace_sort_after_insert = 1
set tags+=tags,tags.vendors

let g:autotagTagsFile=".tags"

set tags=./tags,tags;$HOME
set formatoptions-=cro

" Allow JSX in normal JS files
let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']

let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

" galooshi/vim-import-js config
nmap <Leader>j :ImportJSWord<CR>
nmap <Leader>i :ImportJSFix<CR>


let g:airline_theme = 'molokai'

" EasyMotion
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
let g:EasyMotion_smartcase = 1

" <Leader>f{char} to move to {char}
map <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f)
nmap s <Plug>(easymotion-overwin-f2)

" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

nmap <c-R> :CtrlPBufTag<CR>
nmap <c-E> :CtrlPMRUFiles<CR>
nmap <c-B> :CtrlPBuffer<CR>
let g:ctrlp_custom_ignore = 'node_modules|git'

" ultiSnips
let g:UltiSnipsExpandTrigger="<c-b>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
